from struct import unpack, pack
import bpy
import os
import glob
import math

def vertices_0x030100010380XX6C_with_texture2_(f):
    objectmeshThree=0
    objectmeshFour=0
    objectmeshFive=0
    objectmeshSix=0
    for i, nuOBJ32 in enumerate(bpy.data.meshes):
        if len(nuOBJ32.vertices) == 3:
            objectmeshThree+=416
            objectmeshThree*len(bpy.data.objects)
        elif len(nuOBJ32.vertices) == 4:
            objectmeshFour+=448
            objectmeshFour*len(bpy.data.objects)
        elif len(nuOBJ32.vertices) == 5:
            objectmeshFive+=464
            objectmeshFive*len(bpy.data.objects)
        elif len(nuOBJ32.vertices) == 6:
            objectmeshSix+=512
            objectmeshSix*len(bpy.data.objects)
    twohundredfirtysix_bitTexture=0
    sixtyfour_bitTexture=0
    thirtyTwo_bitTexture=0
    sixteen_bitTexture=0
    for i, nuT32 in enumerate(bpy.data.images):
        if nuT32.size[0] == 32 and nuT32.size[1] == 32:
            thirtyTwo_bitTexture+=4416
            thirtyTwo_bitTexture*len(bpy.data.images)
        elif nuT32.size[0] == 64 and nuT32.size[1] == 64:
            sixtyfour_bitTexture+=16704
            sixtyfour_bitTexture*len(bpy.data.images)
        elif nuT32.size[0] == 256 and nuT32.size[1] == 256:
            twohundredfirtysix_bitTexture+=262464//2
            twohundredfirtysix_bitTexture*len(bpy.data.images)
    f.write(b"NU20")
    f.write(pack("<i", -abs(16+16+16+thirtyTwo_bitTexture+sixteen_bitTexture+sixtyfour_bitTexture+twohundredfirtysix_bitTexture+twohundredfirtysix_bitTexture+16+464*len(bpy.data.materials)+16+objectmeshThree+objectmeshFour+objectmeshFive+objectmeshSix+80*len(bpy.data.objects)+16+16+16)))
    f.write(pack("<I", 6))
    f.write(pack("<I", 0))
    f.write(b"NTBL")
    f.write(pack("<I", 16))
    f.write(pack("<I", 0))
    f.write(pack("<I", 0))
    f.write(b"TST0")
    f.write(pack("<I", thirtyTwo_bitTexture+sixteen_bitTexture+sixtyfour_bitTexture+twohundredfirtysix_bitTexture+twohundredfirtysix_bitTexture+16))
    f.write(pack("<I", len(bpy.data.images)))
    f.write(pack("<I", 0))
    for i, img in enumerate(bpy.data.images):
        if img.size[0] == 32 and img.size[1] == 32:
            f.write(pack("<I", 4416))
            f.write(pack("<I", 56))
            for i in range(56):
                f.write(pack("B", 0))
            f.write(pack("<H", 32))
            f.write(pack("<H", 1))
            f.write(pack("<H", 32))
            f.write(pack("<H", 0))
            f.write(pack("<I", 32))
            f.write(pack("B", 3))
            f.write(pack("B", 0))
            f.write(pack("B", 0))
            f.write(pack("B", 0x81))
            f.write(pack("<I", 4292))
            f.write(pack("<I", 4096))
            f.write(pack("<I", 1))
            f.write(pack("<I", 1))
            f.write(pack("<I", 44))
            for i in range(44):
                f.write(pack("B", 0))
            f.write(pack("<I", 1610612997))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 1342177541))
            f.write(pack("<I", 32771))
            f.write(pack(">I", 16))
            f.write(pack("<I", 14))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 81))
            f.write(pack("<I", 0))
            f.write(pack("<I", 32))
            f.write(pack("<I", 32))
            f.write(pack("<I", 82))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 83))
            f.write(pack("<I", 0))
            f.write(pack("<H", 0x8100))
            f.write(pack("<I", 0))
            f.write(pack("<I", 2048))
            f.write(pack("<H", 0))
            f.write(pack("<H", 0))
            f.write(pack("<H", 0))
            idx1 = 0
            idx2 = 1
            idx3 = 2
            idx4 = 3
            for x in range(32):
                for y in range(32):
                    f.write(pack("B", int(255*img.pixels[idx1])))
                    f.write(pack("B", int(255*img.pixels[idx2])))
                    f.write(pack("B", int(255*img.pixels[idx3])))
                    f.write(pack("B", int(127*img.pixels[idx4])))
                    idx1+=4
                    idx2+=4
                    idx3+=4
                    idx4+=4
            for i in range(80):
                f.write(pack("B", 0xCD))
        elif img.size[0] == 64 and img.size[1] == 64:
            f.write(pack("<I", 16704))
            f.write(pack("<I", 56))
            for i in range(56):
                f.write(pack("B", 0))
            f.write(pack("<H", 64))
            f.write(pack("<H", 1))
            f.write(pack("<H", 64))
            f.write(pack("<H", 0))
            f.write(pack("<I", 64))
            f.write(pack("B", 3))
            f.write(pack("B", 0))
            f.write(pack("B", 0))
            f.write(pack("B", 0x81))
            f.write(pack("<I", 16580))
            f.write(pack("<I", 16384))
            f.write(pack("<I", 1))
            f.write(pack("<I", 1))
            f.write(pack("<I", 44))
            for i in range(44):
                f.write(pack("B", 0))
            f.write(pack("<I", 1610613765))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 1342178309))
            f.write(pack("<I", 32771))
            f.write(pack(">I", 16))
            f.write(pack("<I", 14))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 81))
            f.write(pack("<I", 0))
            f.write(pack("<I", 64))
            f.write(pack("<I", 64))
            f.write(pack("<I", 82))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 83))
            f.write(pack("<I", 0))
            f.write(pack("<H", 0x8400))
            f.write(pack("<I", 0))
            f.write(pack("<I", 2048))
            f.write(pack("<H", 0))
            f.write(pack("<H", 0))
            f.write(pack("<H", 0))
            idx1 = 0
            idx2 = 1
            idx3 = 2
            idx4 = 3
            for x in range(64):
                for y in range(64):
                    f.write(pack("B", int(255*img.pixels[idx1])))
                    f.write(pack("B", int(255*img.pixels[idx2])))
                    f.write(pack("B", int(255*img.pixels[idx3])))
                    f.write(pack("B", int(127*img.pixels[idx4])))
                    idx1+=4
                    idx2+=4
                    idx3+=4
                    idx4+=4
            for i in range(80):
                f.write(pack("B", 0xCD))

        elif img.size[0] == 256 and img.size[1] == 256:
            f.write(pack("<I", 262464))
            f.write(pack("<I", 56))
            for i in range(56):
                f.write(pack("B", 0))
            f.write(pack("<H", 256))
            f.write(pack("<H", 1))
            f.write(pack("<H", 256))
            f.write(pack("<H", 0))
            f.write(pack("<I", 1024))
            f.write(pack("B", 3))
            f.write(pack("B", 0))
            f.write(pack("B", 0))
            f.write(pack("B", 129))
            f.write(pack("<I", 262340))
            f.write(pack("<I", 262144))
            f.write(pack("<I", 4))
            f.write(pack("<I", 4))
            f.write(pack("<I", 60))
            for i in range(44):
                f.write(pack("B", 0))
            f.write(pack("B", 5))
            f.write(pack("B", 64))
            f.write(pack("B", 0))
            f.write(pack("B", 96))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("B", 5))
            f.write(pack("B", 64))
            f.write(pack("B", 0))
            f.write(pack("B", 80))
            f.write(pack("<I", 32771))
            f.write(pack(">I", 16))
            f.write(pack("<I", 14))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 81))
            f.write(pack("<I", 0))
            f.write(pack("<I", 256))
            f.write(pack("<I", 256))
            f.write(pack("<I", 82))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 83))
            f.write(pack("<I", 0))
            f.write(pack("<H", 0xC000))
            f.write(pack("<I", 0))
            f.write(pack("<I", 2048))
            f.write(pack("<H", 0))
            f.write(pack("<H", 0))
            f.write(pack("<H", 0))
            idx1 = 0
            idx2 = 1
            idx3 = 2
            idx4 = 3
            for x in range(256):
                for y in range(256):
                    f.write(pack("B", int(255*img.pixels[idx1])))
                    f.write(pack("B", int(255*img.pixels[idx2])))
                    f.write(pack("B", int(255*img.pixels[idx3])))
                    f.write(pack("B", int(127*img.pixels[idx4])))
                    idx1+=4
                    idx2+=4
                    idx3+=4
                    idx4+=4
            for i in range(80):
                f.write(pack("B", 0xCD))
    f.write(b"MS00")
    f.write(pack("<I", len(bpy.data.materials)*464+16))
    f.write(pack("<I", len(bpy.data.materials)))
    f.write(pack("<I", 0))
    texID=0
    matID=0
    BSDF = "Principled BSDF"
    for i, mat in enumerate(bpy.data.materials):
        f.write(pack("B", 13))
        f.write(pack("B", 0))
        f.write(pack("B", 1))
        f.write(pack("B", 0x60))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 16))
        f.write(pack("B", 8))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0x50))
        f.write(pack("B", 7))
        f.write(pack("B", 0x80))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 16))
        f.write(pack("B", 14))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0x48))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0x1B))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0x44))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0x42))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0x8C))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 1))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0x4E))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0xDB))
        f.write(pack("B", 0x37))
        f.write(pack("B", 5))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0x47))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0x7F))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))#1
        f.write(pack("B", 0))#2
        f.write(pack("B", 0))#3
        f.write(pack("B", 0))#4
        f.write(pack("B", 1))
        f.write(pack("B", 1))
        f.write(pack("B", 0))
        f.write(pack("B", 1))
        f.write(pack("B", 0x13))
        f.write(pack("B", 0))
        f.write(pack("B", 3))
        f.write(pack("B", 0x6C))
        f.write(pack("<f", 1))
        f.write(pack("<f", 1))
        f.write(pack("<f", 1))
        f.write(pack("<f", 1))
        for i in range(19):
            f.write(pack("B", 0))
        f.write(pack("B", 0x30))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        for i in range(128):
            f.write(pack("B", 0))
        f.write(pack("B", 0x19))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))

        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))

        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))

        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))

        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))

        f.write(pack("<I", 16384))
        f.write(pack("B", 0xB0))
        f.write(pack("B", 0xE2))
        f.write(pack("B", 0xA3))
        f.write(pack("B", 0))
        f.write(pack("B", 0x80))
        f.write(pack("B", 0x60))
        f.write(pack("B", 0x49))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))

        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0x3D))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0x58))
        f.write(pack("B", 0xE3))
        f.write(pack("B", 0xA3))
        f.write(pack("B", 0))
        f.write(pack("B", 0xB0))
        f.write(pack("B", 0xDD))
        f.write(pack("B", 0x87))
        f.write(pack("B", 0))
        f.write(pack("B", 0x60))
        f.write(pack("B", 0x7B))
        f.write(pack("B", 0x98))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("<f", 0))
        f.write(pack("B", 0x13))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("<f", mat.node_tree.nodes[BSDF].inputs[0].default_value[0]))
        f.write(pack("<f", mat.node_tree.nodes[BSDF].inputs[0].default_value[1]))
        f.write(pack("<f", mat.node_tree.nodes[BSDF].inputs[0].default_value[2]))
        f.write(pack("<f", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<f", 1))
        f.write(pack("<I", texID))
        f.write(pack("<I", matID))
        f.write(pack("B", 0xA6))
        f.write(pack("B", 255))
        f.write(pack("B", 0))
        f.write(pack("B", 0))

        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0xFF))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        texID+=1
        matID+=1
    f.write(b"OBJ0")
    f.write(pack("<I", objectmeshThree+objectmeshFour++objectmeshFive+objectmeshSix+16))
    f.write(pack("<I", len(bpy.data.objects)))
    f.write(pack("<I", 0))
    for i, obdata in enumerate(bpy.data.meshes):
        if len(obdata.vertices) == 3:
            f.write(pack("<I", 4))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 1))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 96))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
                                
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
                                
            f.write(pack("<I", 224))

            f.write(pack("<H", len(obdata.vertices)*3))
            f.write(pack("<H", 24581))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<H", 86))
            f.write(pack("<H", 27649))
            f.write(pack("<I", 32768))
            f.write(pack("B", 0))
            f.write(pack("<H", 704))
            f.write(pack("B", 0x30))
            f.write(pack("B", 18))
            f.write(pack("B", 5))
            f.write(pack("B", 0))
            f.write(pack("B", 0))
            f.write(pack("<I", 0))
            f.write(pack("B", 0xD2))
            f.write(pack("B", 128))
            f.write(pack("B", 1))
            f.write(pack("B", 108))
            f.write(pack("B", len(obdata.vertices)))
            f.write(pack("<I", 128))
            f.write(pack("B", 64))
            f.write(pack("B", 2))
            f.write(pack("B", 48))
            f.write(pack("<I", 1298))
            f.write(pack("<I", 0))
            f.write(pack("B", 2))
            f.write(pack("B", 128))
            f.write(pack("B", 1))
            f.write(pack("B", 109))
            f.write(pack("<I", len(obdata.vertices)*3))
            f.write(pack("<I", 0))
            f.write(pack("B", 3))
            f.write(pack("B", 1))
            f.write(pack("B", 0))
            f.write(pack("B", 1))
            f.write(pack("B", 3))
            f.write(pack("B", 128))
            f.write(pack("B", len(obdata.vertices)))
            f.write(pack("B", 108))
            uv_layer = obdata.uv_layers.active.data
            color_layer = obdata.vertex_colors.active.data
            indexFaces = -1
            for v in obdata.vertices:
                f.write(pack("<f", v.co.x))
                f.write(pack("<f", v.co.z))
                f.write(pack("<f", v.co.y))
                f.write(pack("<f", v.co.z*v.normal.z))
            f.seek(-48,1)
            for facs in obdata.polygons:
                indexFaces+=1
                if indexFaces == 0:
                    f.seek(12,1)
                    f.write(pack("B", 1))
                    f.write(pack("B", 128))
                    f.seek(2,1)
                    f.seek(12,1)
                    f.write(pack("B", 1))
                    f.write(pack("B", 128))
                    f.seek(2,1)
                    f.seek(12,1)
                    f.write(pack("B", 0))
                    f.write(pack("B", 0))
                    f.seek(2,1)
                else:
                    raise Exception("must be in triangle strips")
                break
            f.write(pack("B", 4))
            f.write(pack("B", 128))
            f.write(pack("B", len(obdata.vertices)))
            f.write(pack("B", 101))
            for v in obdata.vertices:
                f.write(pack("<h", int(4096*uv_layer[v.index].uv[0])))
                f.write(pack("<h", -int(4096*uv_layer[v.index].uv[1])))
            f.write(pack("B", 5))
            f.write(pack("B", 192))
            f.write(pack("B", len(obdata.vertices)))
            f.write(pack("B", 110))
            for v in obdata.vertices:
                f.write(pack("B", int(127*color_layer[v.index].color[0])))
                f.write(pack("B", int(127*color_layer[v.index].color[1])))
                f.write(pack("B", int(127*color_layer[v.index].color[2])))
                f.write(pack("B", int(127*color_layer[v.index].color[3])))
            f.write(pack("B", 1))
            f.write(pack("B", 1))
            f.write(pack("B", 0))
            f.write(pack("B", 1))
            f.write(pack("B", 0))
            f.write(pack("B", 3))
            f.write(pack("B", 0))
            f.write(pack("B", 20))
            for i in range(60):
                f.write(pack("B", 0))
            for i in range(8):
                f.write(pack("<f", 1))
        elif len(obdata.vertices) == 4:
            f.write(pack("<I", 4))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 1))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 96))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
                                
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
                                
            f.write(pack("<I", 256))

            f.write(pack("<H", len(obdata.vertices)*3))
            f.write(pack("<H", 24581))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<H", 86))
            f.write(pack("<H", 27649))
            f.write(pack("<I", 32768))
            f.write(pack("B", 0))
            f.write(pack("<H", 704))
            f.write(pack("B", 0x30))
            f.write(pack("B", 18))
            f.write(pack("B", 5))
            f.write(pack("B", 0))
            f.write(pack("B", 0))
            f.write(pack("<I", 0))
            f.write(pack("B", 0xD2))
            f.write(pack("B", 128))
            f.write(pack("B", 1))
            f.write(pack("B", 108))
            f.write(pack("B", len(obdata.vertices)))
            f.write(pack("<I", 128))
            f.write(pack("B", 64))
            f.write(pack("B", 2))
            f.write(pack("B", 48))
            f.write(pack("<I", 1298))
            f.write(pack("<I", 0))
            f.write(pack("B", 2))
            f.write(pack("B", 128))
            f.write(pack("B", 1))
            f.write(pack("B", 109))
            f.write(pack("<I", len(obdata.vertices)*3))
            f.write(pack("<I", 0))
            f.write(pack("B", 3))
            f.write(pack("B", 1))
            f.write(pack("B", 0))
            f.write(pack("B", 1))
            f.write(pack("B", 3))
            f.write(pack("B", 128))
            f.write(pack("B", len(obdata.vertices)))
            f.write(pack("B", 108))
            indexFaces = -1
            color_layer2 = obdata.vertex_colors.active.data
            for v in obdata.vertices:
                f.write(pack("<f", v.co.x))
                f.write(pack("<f", v.co.z))
                f.write(pack("<f", v.co.y))
                f.write(pack("<f", v.co.z*v.normal.z))
            f.seek(-64,1)
            for facs in obdata.polygons:
                indexFaces+=1
                if indexFaces == 0:
                    
                    if facs.vertices[0:3]:
                        f.seek(12,1)
                        f.write(pack("B", 1))
                        f.write(pack("B", 128))
                        f.seek(2,1)
                        f.seek(12,1)
                        f.write(pack("B", 1))
                        f.write(pack("B", 128))
                        f.seek(2,1)
                        f.seek(12,1)
                        f.write(pack("B", 0))
                        f.write(pack("B", 0))
                        f.seek(2,1)
                        f.seek(12,1)
                        f.write(pack("B", 0))
                        f.write(pack("B", 0))
                        f.seek(2,1)
                    else:
                        raise Exception("must be in triangle strips")
                    break
            f.write(pack("B", 1))
            f.write(pack("B", 0))
            f.write(pack("B", 0))
            f.write(pack("B", 5))
            f.write(pack("B", 4))
            f.write(pack("B", 128))
            f.write(pack("B", len(obdata.vertices)))
            f.write(pack("B", 101))
            uv_layer2 = obdata.uv_layers.active.data
            for v in obdata.vertices:
                f.write(pack("<h", int(4096*uv_layer2[v.index].uv[0])))
                f.write(pack("<h", -int(4096*uv_layer2[v.index].uv[1])))
                
            f.write(pack("B", 0))
            f.write(pack("B", 0))
            f.write(pack("B", 0))
            f.write(pack("B", 5))
            f.write(pack("B", 5))
            f.write(pack("B", 192))
            f.write(pack("B", len(obdata.vertices)))
            f.write(pack("B", 110))
            for v in obdata.vertices:
                f.write(pack("B", int(127*color_layer2[v.index].color[0])))
                f.write(pack("B", int(127*color_layer2[v.index].color[1])))
                f.write(pack("B", int(127*color_layer2[v.index].color[2])))
                f.write(pack("B", int(127*color_layer2[v.index].color[3])))
            f.write(pack("B", 1))
            f.write(pack("B", 1))
            f.write(pack("B", 0))
            f.write(pack("B", 1))
            f.write(pack("B", 0))
            f.write(pack("B", 3))
            f.write(pack("B", 0))
            f.write(pack("B", 20))
            for i in range(60):
                f.write(pack("B", 0))
            for i in range(8):
                f.write(pack("<f", 1))
        elif len(obdata.vertices) == 5:
            f.write(pack("<I", 4))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 1))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 96))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
                                
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
                                
            f.write(pack("<I", 288))

            f.write(pack("<H", len(obdata.vertices)*3))
            f.write(pack("<H", 24581))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<H", 86))
            f.write(pack("<H", 27649))
            f.write(pack("<I", 32768))
            f.write(pack("B", 0))
            f.write(pack("<H", 704))
            f.write(pack("B", 0x30))
            f.write(pack("B", 18))
            f.write(pack("B", 5))
            f.write(pack("B", 0))
            f.write(pack("B", 0))
            f.write(pack("<I", 0))
            f.write(pack("B", 0xD2))
            f.write(pack("B", 128))
            f.write(pack("B", 1))
            f.write(pack("B", 108))
            f.write(pack("B", len(obdata.vertices)))
            f.write(pack("<I", 128))
            f.write(pack("B", 64))
            f.write(pack("B", 2))
            f.write(pack("B", 48))
            f.write(pack("<I", 1298))
            f.write(pack("<I", 0))
            f.write(pack("B", 2))
            f.write(pack("B", 128))
            f.write(pack("B", 1))
            f.write(pack("B", 109))
            f.write(pack("<I", len(obdata.vertices)*3))
            f.write(pack("<I", 0))
            f.write(pack("B", 3))
            f.write(pack("B", 1))
            f.write(pack("B", 0))
            f.write(pack("B", 1))
            f.write(pack("B", 3))
            f.write(pack("B", 128))
            f.write(pack("B", len(obdata.vertices)))
            f.write(pack("B", 108))
            indexFaces = -1
            uv_layer3 = obdata.uv_layers.active.data
            color_layer3 = obdata.vertex_colors.active.data
            for v in obdata.vertices:
                f.write(pack("<f", v.co.x))
                f.write(pack("<f", v.co.z))
                f.write(pack("<f", v.co.y))
                f.write(pack("<f", v.co.z*v.normal.z))
            f.seek(-80,1)
            for facs in obdata.polygons:
                indexFaces+=1
                if indexFaces == 0:
                    
                    if facs.vertices[0:3]:
                        f.seek(12,1)
                        f.write(pack("B", 1))
                        f.write(pack("B", 128))
                        f.seek(2,1)
                        f.seek(12,1)
                        f.write(pack("B", 1))
                        f.write(pack("B", 128))
                        f.seek(2,1)
                        f.seek(12,1)
                        f.write(pack("B", 0))
                        f.write(pack("B", 0))
                        f.seek(2,1)
                        f.seek(12,1)
                        f.write(pack("B", 0))
                        f.write(pack("B", 0))
                        f.seek(2,1)
                        f.seek(12,1)
                        f.write(pack("B", 0))
                        f.write(pack("B", 0))
                        f.seek(2,1)
                    else:
                        raise Exception("must be in triangle strips")
                    break
            f.write(pack("B", 4))
            f.write(pack("B", 128))
            f.write(pack("B", len(obdata.vertices)))
            f.write(pack("B", 101))
            for v in obdata.vertices:
                f.write(pack("<h", int(4096*uv_layer3[v.index].uv[0])))
                f.write(pack("<h", -int(4096*uv_layer3[v.index].uv[1])))
            f.write(pack("B", 5))
            f.write(pack("B", 192))
            f.write(pack("B", len(obdata.vertices)))
            f.write(pack("B", 110))
            for v in obdata.vertices:
                f.write(pack("B", int(127*color_layer3[v.index].color[0])))
                f.write(pack("B", int(127*color_layer3[v.index].color[1])))
                f.write(pack("B", int(127*color_layer3[v.index].color[2])))
                f.write(pack("B", int(127*color_layer3[v.index].color[3])))
            f.write(pack("B", 1))
            f.write(pack("B", 1))
            f.write(pack("B", 0))
            f.write(pack("B", 1))
            f.write(pack("B", 0))
            f.write(pack("B", 3))
            f.write(pack("B", 0))
            f.write(pack("B", 20))
            for i in range(60):
                f.write(pack("B", 0))
            for i in range(8):
                f.write(pack("<f", 1))
        elif len(obdata.vertices) == 6:
            f.write(pack("<I", 4))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 1))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 96))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
                                
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
                                
            f.write(pack("<I", 320))

            f.write(pack("<H", len(obdata.vertices)*3))
            f.write(pack("<H", 24581))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<H", 86))
            f.write(pack("<H", 27649))
            f.write(pack("<I", 32768))
            f.write(pack("B", 0))
            f.write(pack("<H", 704))
            f.write(pack("B", 0x30))
            f.write(pack("B", 18))
            f.write(pack("B", 5))
            f.write(pack("B", 0))
            f.write(pack("B", 0))
            f.write(pack("<I", 0))
            f.write(pack("B", 0xD2))
            f.write(pack("B", 128))
            f.write(pack("B", 1))
            f.write(pack("B", 108))
            f.write(pack("B", len(obdata.vertices)))
            f.write(pack("<I", 128))
            f.write(pack("B", 64))
            f.write(pack("B", 2))
            f.write(pack("B", 48))
            f.write(pack("<I", 1298))
            f.write(pack("<I", 0))
            f.write(pack("B", 2))
            f.write(pack("B", 128))
            f.write(pack("B", 1))
            f.write(pack("B", 109))
            f.write(pack("<I", len(obdata.vertices)*3))
            f.write(pack("<I", 0))
            f.write(pack("B", 3))
            f.write(pack("B", 1))
            f.write(pack("B", 0))
            f.write(pack("B", 1))
            f.write(pack("B", 3))
            f.write(pack("B", 128))
            f.write(pack("B", len(obdata.vertices)))
            f.write(pack("B", 108))
            indexFaces = -1
            indexFaces2 = -1
            uv_layer4 = obdata.uv_layers.active.data
            color_layer4 = obdata.vertex_colors.active.data
            for v in obdata.vertices:
                f.write(pack("<f", v.co.x))
                f.write(pack("<f", v.co.z))
                f.write(pack("<f", v.co.y))
                f.write(pack("<f", v.co.z*v.normal.z))
            f.seek(-96,1)
            for facs in obdata.polygons:
                indexFaces+=1
                if indexFaces == 0:
                    
                    if facs.vertices[0:3]:
                        f.seek(12,1)
                        f.write(pack("B", 1))
                        f.write(pack("B", 128))
                        f.seek(2,1)
                        f.seek(12,1)
                        f.write(pack("B", 1))
                        f.write(pack("B", 128))
                        f.seek(2,1)
                        f.seek(12,1)
                        f.write(pack("B", 0))
                        f.write(pack("B", 0))
                        f.seek(2,1)
                        f.seek(12,1)
                        f.write(pack("B", 1))
                        f.write(pack("B", 128))
                        f.seek(2,1)
                        f.seek(12,1)
                        f.write(pack("B", 1))
                        f.write(pack("B", 128))
                        f.seek(2,1)
                        f.seek(12,1)
                        f.write(pack("B", 0))
                        f.write(pack("B", 0))
                        f.seek(2,1)
                elif indexFaces == 3:
                    if facs.vertices[0:3]:
                        f.seek(-96,1)
                        f.seek(12,1)
                        f.write(pack("B", 1))
                        f.write(pack("B", 128))
                        f.seek(2,1)
                        f.seek(12,1)
                        f.write(pack("B", 1))
                        f.write(pack("B", 128))
                        f.seek(2,1)
                        f.seek(12,1)
                        f.write(pack("B", 0))
                        f.write(pack("B", 0))
                        f.seek(2,1)
                        f.seek(12,1)
                        f.write(pack("B", 0))
                        f.write(pack("B", 0))
                        f.seek(2,1)
                        f.seek(12,1)
                        f.write(pack("B", 0))
                        f.write(pack("B", 0))
                        f.seek(2,1)
                        f.seek(12,1)
                        f.write(pack("B", 0))
                        f.write(pack("B", 0))
                        f.seek(2,1)
                    else:
                        raise Exception("must be in triangle strips")
                    break
            f.write(pack("B", 4))
            f.write(pack("B", 128))
            f.write(pack("B", len(obdata.vertices)))
            f.write(pack("B", 109))
            for v in obdata.vertices:
                f.write(pack("<h", int(4096*uv_layer4[v.index].uv[0])))
                f.write(pack("<h", -int(4096*uv_layer4[v.index].uv[1])))
                f.write(pack("<i", 4096))
            f.write(pack("B", 5))
            f.write(pack("B", 192))
            f.write(pack("B", len(obdata.vertices)))
            f.write(pack("B", 110))
            for v in obdata.vertices:
                f.write(pack("B", int(127*color_layer4[v.index].color[0])))
                f.write(pack("B", int(127*color_layer4[v.index].color[1])))
                f.write(pack("B", int(127*color_layer4[v.index].color[2])))
                f.write(pack("B", int(127*color_layer4[v.index].color[3])))
            f.write(pack("B", 1))
            f.write(pack("B", 1))
            f.write(pack("B", 0))
            f.write(pack("B", 1))
            f.write(pack("B", 0))
            f.write(pack("B", 3))
            f.write(pack("B", 0))
            f.write(pack("B", 20))
            for i in range(60):
                f.write(pack("B", 0))
            for i in range(8):
                f.write(pack("<f", 1))
                
    f.write(b"INST")
    f.write(pack("<I", 80*len(bpy.data.objects)+16))
    f.write(pack("<I", len(bpy.data.objects)))
    f.write(pack("<I", 0))
    objIndex=0
    for i, obj in enumerate(bpy.data.objects):
        f.write(pack("<f", obj.scale[0]))
        f.write(pack("<f", math.radians(obj.rotation_euler[2])))
        f.write(pack("<f", math.radians(obj.rotation_euler[1])))
        f.write(pack("<f", 0))
        f.write(pack("<f", math.radians(-obj.rotation_euler[2])))
        f.write(pack("<f", obj.scale[1]))
        f.write(pack("<f", math.radians(obj.rotation_euler[0]))) # 28
        f.write(pack("<f", math.radians(-obj.rotation_euler[1]))) # 32
        f.write(pack("<f", 0))
        f.write(pack("<f", math.radians(-obj.rotation_euler[0])))
        f.write(pack("<f", obj.scale[2]))
        f.write(pack("<f", 0))
        f.write(pack("<f", obj.location[0]))
        f.write(pack("<f", obj.location[2]))
        f.write(pack("<f", obj.location[1]))
        f.write(pack("<f", 1))
        f.write(pack("<i", objIndex))
        f.write(pack("<I", 37))
        f.write(pack("<f", 0))
        f.write(pack("<f", 0))
        objIndex+=1
    f.write(b"SST0")
    f.write(pack("<I", 16))
    f.write(pack("<I", 0))
    f.write(pack("<I", 0))
    f.write(b"BNDS")
    f.write(pack("<I", 16))
    f.write(pack("<I", 0))
    f.write(pack("<I", 0))
