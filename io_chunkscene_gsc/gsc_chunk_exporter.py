from struct import pack, unpack
import bpy
import struct


#leave it all to black by default for the first start
def encodeTextureSet_A(f):
    lenSize=0
    for i, extraobdata in enumerate(bpy.data.meshes):
        countlentotal = len(extraobdata.vertices)
        lenSize+=countlentotal
    f.write(b"NU20")
    f.write(pack("<i", -abs(lenSize*24+8*len(bpy.data.objects)+8*len(bpy.data.objects)+8*len(bpy.data.objects)+32*len(bpy.data.objects)+68*len(bpy.data.objects)+228*len(bpy.data.objects)+288*len(bpy.data.objects)+48*len(bpy.data.objects)+128*len(bpy.data.objects)+80*len(bpy.data.objects)+16+16+16+16+16+16+16+16+2256*len(bpy.data.images))))
    f.write(pack("<I", 6))
    f.write(pack("<I", 0))
    f.write(b"NTBL")
    f.write(pack("<I", 16))
    f.write(pack("<I", 0))
    f.write(pack("<I", 0))
    f.write(b"TST0")
    f.write(pack("<I", 16+2256*len(bpy.data.images)))
    f.write(pack("<I", len(bpy.data.images)))
    f.write(pack("<I", 0))
    TextureDataSize = 256
    if TextureDataSize == 256:
        
        for i, tex in enumerate(bpy.data.images):
            f.write(pack("<I", 2244))
            f.write(pack("<I", 8192))
            f.write(pack("<I", 2))
            f.write(pack("<I", 2))
            f.write(pack("<I", 12))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<H", 133))
            f.write(pack("B", 0))
            f.write(pack("B", 96))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<H", 133))
            f.write(pack("B", 0))
            f.write(pack("B", 80))
            f.write(pack("B", 3))
            f.write(pack("<H", 128))
            f.write(pack("<H", 0))
            f.write(pack("<H", 0))
            f.write(pack("B", 16))
            f.write(pack("B", 14))
            f.write(pack("B", 0))
            f.write(pack("B", 0))
            f.write(pack("B", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 81))
            f.write(pack("<I", 0))
            width = f.write(pack("<H", tex.size[0]//4))
            f.write(pack("<H", 0))
            height = f.write(pack("<H", tex.size[1]//4))
            f.write(pack("<H", 0))
            f.write(pack("<I", 82))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 83))
            f.write(pack("<I", 0))
            f.write(pack("<H", 0x8080))
            f.write(pack("<H", 0))
            f.write(pack("<H", 0))
            f.write(pack("<H", 2048))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            lengthT = width*height
            for k in range(lengthT*512):
                f.write(pack("B", int(255*tex.pixels[k])))
            for i in range(80):
                f.write(pack("B", 0xCD))
    f.write(b"MS00")
    f.write(pack("<I", len(bpy.data.materials)*464+16))
    f.write(pack("<I", len(bpy.data.materials)))
    f.write(pack("<I", 0))
    MaterialID=1
    TextureID=1
    MaterialNameID = 0
    BSDF = "Principled BSDF"
    for i, mat in enumerate(bpy.data.materials):
        for i in range(288):
            f.write(pack("B", 0))
        for i in range(48):
            f.write(pack("B", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 61))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<f", mat.specular_intensity))
        f.write(pack("<I", 19))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<f", 0.5))
        f.write(pack("<f", 0.5))
        f.write(pack("<f", 0.5))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<f", mat.roughness))
        f.write(pack("<I", 0))
        f.write(pack("<I", MaterialID))
        f.write(pack("<I", 65446))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0xFF000000))
        f.write(pack("<I", 0))
        TextureID+=1
        MaterialID+=1
        #TextureID+=len(bpy.data.images)
        MaterialNameID+=1

    f.write(b"OBJ0")
    f.write(pack("<I", lenSize*24+8*len(bpy.data.objects)+8*len(bpy.data.objects)+8*len(bpy.data.objects)+32*len(bpy.data.objects)+68*len(bpy.data.objects)+228*len(bpy.data.objects)+16))
    f.write(pack("<I", len(bpy.data.objects)))
    f.write(pack("<I", 0))
    for i, obdata in enumerate(bpy.data.meshes):
        f.write(pack("<I", 4))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 1))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 96))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
                                
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
                                
        f.write(pack("<I", len(obdata.vertices)*24+76+68+8+8))
        f.write(pack("<H", len(obdata.vertices)*3))
        f.write(pack("<H", 24581))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<H", 86))
        f.write(pack("<H", 27649))
        f.write(pack("<I", 32768))
        f.write(pack("B", 0))
        f.write(pack("<H", 704))
        f.write(pack("B", 30))
        f.write(pack("B", 18))
        f.write(pack("B", 5))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("<I", 0))
        f.write(pack("B", 0xD2))
        f.write(pack("B", 128))
        f.write(pack("B", 1))
        f.write(pack("B", 108))
        f.write(pack("B", len(obdata.vertices)))
        f.write(pack("<I", 128))
        f.write(pack("B", 64))
        f.write(pack("B", 2))
        f.write(pack("B", 48))
        f.write(pack("<I", 1298))
        f.write(pack("<I", 0))
        f.write(pack("B", 2))
        f.write(pack("B", 128))
        f.write(pack("B", 1))
        f.write(pack("B", 109))
        f.write(pack("<I", len(obdata.vertices)*3))
        f.write(pack("<I", 0))
        f.write(pack("B", 3))
        f.write(pack("B", 1))
        f.write(pack("B", 0))
        f.write(pack("B", 1))
        f.write(pack("B", 3))
        f.write(pack("B", 128))
        f.write(pack("B", len(obdata.vertices)))
        f.write(pack("B", 108))
        color_layer = obdata.vertex_colors.active.data
        for v in obdata.vertices:
            f.write(pack("<f", v.co.x))
            f.write(pack("<f", v.co.y))
            f.write(pack("<f", v.co.z))
            f.write(pack("<f", 1))
        f.write(pack("B", 1))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 5))
        f.write(pack("B", 4))
        f.write(pack("B", 128))
        f.write(pack("B", len(obdata.vertices)))
        f.write(pack("B", 101))
        uv_layer = obdata.uv_layers.active.data
        for v in obdata.vertices:
            f.write(pack("<h", int(4000*uv_layer[v.index].uv[0])))
            f.write(pack("<h", int(4000*uv_layer[v.index].uv[1])))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 5))
        f.write(pack("B", 5))
        f.write(pack("B", 192))
        f.write(pack("B", len(obdata.vertices)))
        f.write(pack("B", 110))
        for v in obdata.vertices:
            f.write(pack("B", int(255*color_layer[v.index].color[0])))
            f.write(pack("B", int(255*color_layer[v.index].color[1])))
            f.write(pack("B", int(255*color_layer[v.index].color[2])))
            f.write(pack("B", int(255*color_layer[v.index].color[3])))
        f.write(pack("B", 1))
        f.write(pack("B", 1))
        f.write(pack("B", 0))
        f.write(pack("B", 1))
        f.write(pack("B", 0))
        f.write(pack("B", 3))
        f.write(pack("B", 0))
        f.write(pack("B", 20))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))

        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<f", 1))
        f.write(pack("<f", 1))
        f.write(pack("<f", 1))
        f.write(pack("<f", 1))
        f.write(pack("<f", 1))
        f.write(pack("<f", 1))
        f.write(pack("<f", 1))
        f.write(pack("<f", 1))

    f.write(b"INST")
    f.write(pack("<I", len(bpy.data.objects)*80+16))
    f.write(pack("<I", len(bpy.data.objects)))
    f.write(pack("<I", 0))
    objIndex=0
    for i, obj in enumerate(bpy.data.objects):
        f.write(pack("<f", obj.scale[0]))
        f.write(pack("<f", 0))
        f.write(pack("<f", 0))
        f.write(pack("<f", 0))
        f.write(pack("<f", 0))
        f.write(pack("<f", obj.scale[1]))
        f.write(pack("<f", 0))
        f.write(pack("<f", 0))
        f.write(pack("<f", 0))
        f.write(pack("<f", 0))
        f.write(pack("<f", obj.scale[2]))
        f.write(pack("<f", 0))
        f.write(pack("<f", obj.location[0]))
        f.write(pack("<f", obj.location[1]))
        f.write(pack("<f", obj.location[2]))
        f.write(pack("<f", 1))
        f.write(pack("<I", objIndex))
        f.write(pack("<I", 37))
        f.write(pack("<f", 0))
        f.write(pack("<f", 0))
        objIndex+=1
    f.write(b"SST0")
    f.write(pack("<I", 16))
    f.write(pack("<I", 0))
    f.write(pack("<I", 0))
    f.write(b"BNDS")
    f.write(pack("<I", 16))
    f.write(pack("<I", 0))
    f.write(pack("<I", 0))

def Objects_combineallThree(f):
    lenSize=0
    for i, extraobdata in enumerate(bpy.data.meshes):
        countlentotal = len(extraobdata.vertices)
        lenSize+=countlentotal
    f.write(b"NU20")
    f.write(pack("<i", -abs(lenSize*24+8*len(bpy.data.objects)+8*len(bpy.data.objects)+8*len(bpy.data.objects)+32*len(bpy.data.objects)+68*len(bpy.data.objects)+228*len(bpy.data.objects)+288*len(bpy.data.objects)+48*len(bpy.data.objects)+128*len(bpy.data.objects)+80*len(bpy.data.objects)+16+16+16+16+16+16+16)))
    f.write(pack("<I", 6))
    f.write(pack("<I", 0))
    f.write(b"NTBL")
    f.write(pack("<I", 16))
    f.write(pack("<I", 0))
    f.write(pack("<I", 0))
    ##########################
    f.write(b"MS00")
    f.write(pack("<I", len(bpy.data.materials)*464+16))
    f.write(pack("<I", len(bpy.data.materials)))
    f.write(pack("<I", 0))
    MaterialID=1
    TextureID=1
    MaterialNameID = 0
    BSDF = "Principled BSDF"
    for i, mat in enumerate(bpy.data.materials):
        for i in range(288):
            f.write(pack("B", 0))
        for i in range(48):
            f.write(pack("B", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 61))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<f", mat.specular_intensity))
        f.write(pack("<I", 19))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<f", 0.5))
        f.write(pack("<f", 0.5))
        f.write(pack("<f", 0.5))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<f", mat.roughness))
        f.write(pack("<I", 0))
        f.write(pack("<I", MaterialID))
        f.write(pack("<I", 65446))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0xFF000000))
        f.write(pack("<I", 0))
        MaterialID+=1
        #TextureID+=len(bpy.data.images)
        MaterialNameID+=1

    f.write(b"OBJ0")
    f.write(pack("<I", lenSize*24+8*len(bpy.data.objects)+8*len(bpy.data.objects)+8*len(bpy.data.objects)+32*len(bpy.data.objects)+68*len(bpy.data.objects)+228*len(bpy.data.objects)+16))
    f.write(pack("<I", len(bpy.data.objects)))
    f.write(pack("<I", 0))
    for i, obdata in enumerate(bpy.data.meshes):
        f.write(pack("<I", 4))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 1))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 96))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
                                
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
                                
        f.write(pack("<I", len(obdata.vertices)*24+76+68+8+8))
        f.write(pack("<H", len(obdata.vertices)*3))
        f.write(pack("<H", 24581))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<H", 86))
        f.write(pack("<H", 27649))
        f.write(pack("<I", 32768))
        f.write(pack("B", 0))
        f.write(pack("<H", 704))
        f.write(pack("B", 30))
        f.write(pack("B", 18))
        f.write(pack("B", 5))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("<I", 0))
        f.write(pack("B", 0xD2))
        f.write(pack("B", 128))
        f.write(pack("B", 1))
        f.write(pack("B", 108))
        f.write(pack("B", len(obdata.vertices)))
        f.write(pack("<I", 128))
        f.write(pack("B", 64))
        f.write(pack("B", 2))
        f.write(pack("B", 48))
        f.write(pack("<I", 1298))
        f.write(pack("<I", 0))
        f.write(pack("B", 2))
        f.write(pack("B", 128))
        f.write(pack("B", 1))
        f.write(pack("B", 109))
        f.write(pack("<I", len(obdata.vertices)*3))
        f.write(pack("<I", 0))
        f.write(pack("B", 3))
        f.write(pack("B", 1))
        f.write(pack("B", 0))
        f.write(pack("B", 1))
        f.write(pack("B", 3))
        f.write(pack("B", 128))
        f.write(pack("B", len(obdata.vertices)))
        f.write(pack("B", 108))
        color_layer = obdata.vertex_colors.active.data
        for v in obdata.vertices:
            f.write(pack("<f", v.co.x))
            f.write(pack("<f", v.co.y))
            f.write(pack("<f", v.co.z))
            f.write(pack("<f", 1))
        f.write(pack("B", 1))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 5))
        f.write(pack("B", 4))
        f.write(pack("B", 128))
        f.write(pack("B", len(obdata.vertices)))
        f.write(pack("B", 101))
        uv_layer = obdata.uv_layers.active.data
        for v in obdata.vertices:
            f.write(pack("<h", int(10000*uv_layer[v.index].uv[0])))
            f.write(pack("<h", int(10000*uv_layer[v.index].uv[1])))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 5))
        f.write(pack("B", 5))
        f.write(pack("B", 192))
        f.write(pack("B", len(obdata.vertices)))
        f.write(pack("B", 110))
        for v in obdata.vertices:
            f.write(pack("B", int(127*color_layer[v.index].color[0])))
            f.write(pack("B", int(127*color_layer[v.index].color[1])))
            f.write(pack("B", int(127*color_layer[v.index].color[2])))
            f.write(pack("B", int(127*color_layer[v.index].color[3])))
        f.write(pack("B", 1))
        f.write(pack("B", 1))
        f.write(pack("B", 0))
        f.write(pack("B", 1))
        f.write(pack("B", 0))
        f.write(pack("B", 3))
        f.write(pack("B", 0))
        f.write(pack("B", 20))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))

        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<f", 1))
        f.write(pack("<f", 1))
        f.write(pack("<f", 1))
        f.write(pack("<f", 1))
        f.write(pack("<f", 1))
        f.write(pack("<f", 1))
        f.write(pack("<f", 1))
        f.write(pack("<f", 1))

    f.write(b"INST")
    f.write(pack("<I", len(bpy.data.objects)*80+16))
    f.write(pack("<I", len(bpy.data.objects)))
    f.write(pack("<I", 0))
    objIndex=0
    for i, obj in enumerate(bpy.data.objects):
        f.write(pack("<f", obj.scale[0]))
        f.write(pack("<f", 0))
        f.write(pack("<f", 0))
        f.write(pack("<f", 0))
        f.write(pack("<f", 0))
        f.write(pack("<f", obj.scale[1]))
        f.write(pack("<f", 0))
        f.write(pack("<f", 0))
        f.write(pack("<f", 0))
        f.write(pack("<f", 0))
        f.write(pack("<f", obj.scale[2]))
        f.write(pack("<f", 0))
        f.write(pack("<f", obj.location[0]))
        f.write(pack("<f", obj.location[1]))
        f.write(pack("<f", obj.location[2]))
        f.write(pack("<f", 1))
        f.write(pack("<I", objIndex))
        f.write(pack("<I", 37))
        f.write(pack("<f", 0))
        f.write(pack("<f", 0))
        objIndex+=1
    f.write(b"SST0")
    f.write(pack("<I", 16))
    f.write(pack("<I", 0))
    f.write(pack("<I", 0))
    f.write(b"BNDS")
    f.write(pack("<I", 16))
    f.write(pack("<I", 0))
    f.write(pack("<I", 0))

def Objects_combineallTwo(f):
    lenSize=0
    for i, extraobdata in enumerate(bpy.data.meshes):
        countlentotal = len(extraobdata.vertices)
        lenSize+=countlentotal
    f.write(b"NU20")
    f.write(pack("<i", -abs(lenSize*24+8*len(bpy.data.objects)+8*len(bpy.data.objects)+8*len(bpy.data.objects)+32*len(bpy.data.objects)+68*len(bpy.data.objects)+228*len(bpy.data.objects)+288*len(bpy.data.objects)+48*len(bpy.data.objects)+128*len(bpy.data.objects)+80*len(bpy.data.objects)+16+16+16+16+16+16+16)))
    f.write(pack("<I", 6))
    f.write(pack("<I", 0))
    f.write(b"NTBL")
    f.write(pack("<I", 16))
    f.write(pack("<I", 0))
    f.write(pack("<I", 0))
    ##########################
    f.write(b"MS00")
    f.write(pack("<I", len(bpy.data.materials)*464+16))
    f.write(pack("<I", len(bpy.data.materials)))
    f.write(pack("<I", 0))
    MaterialID=1
    TextureID=1
    MaterialNameID = 0
    BSDF = "Principled BSDF"
    for i, mat in enumerate(bpy.data.materials):
        for i in range(288):
            f.write(pack("B", 0))
        for i in range(48):
            f.write(pack("B", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 61))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<f", mat.specular_intensity))
        f.write(pack("<I", 19))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<f", 0.5))
        f.write(pack("<f", 0.5))
        f.write(pack("<f", 0.5))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<f", mat.roughness))
        f.write(pack("<I", 0))
        f.write(pack("<I", MaterialID))
        f.write(pack("<I", 65446))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0xFF000000))
        f.write(pack("<I", 0))
        MaterialID+=1
        #TextureID+=len(bpy.data.images)
        MaterialNameID+=1

    f.write(b"OBJ0")
    f.write(pack("<I", lenSize*24+8*len(bpy.data.objects)+8*len(bpy.data.objects)+8*len(bpy.data.objects)+32*len(bpy.data.objects)+68*len(bpy.data.objects)+228*len(bpy.data.objects)+16))
    f.write(pack("<I", len(bpy.data.objects)))
    f.write(pack("<I", 0))
    for i, obdata in enumerate(bpy.data.meshes):
        f.write(pack("<I", 4))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 1))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 96))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
                                
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
                                
        f.write(pack("<I", len(obdata.vertices)*24+76+68+8+8))
        f.write(pack("<H", len(obdata.vertices)*3))
        f.write(pack("<H", 24581))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<H", 86))
        f.write(pack("<H", 27649))
        f.write(pack("<I", 32768))
        f.write(pack("B", 0))
        f.write(pack("<H", 704))
        f.write(pack("B", 30))
        f.write(pack("B", 18))
        f.write(pack("B", 5))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("<I", 0))
        f.write(pack("B", 0xD2))
        f.write(pack("B", 128))
        f.write(pack("B", 1))
        f.write(pack("B", 108))
        f.write(pack("B", len(obdata.vertices)))
        f.write(pack("<I", 128))
        f.write(pack("B", 64))
        f.write(pack("B", 2))
        f.write(pack("B", 48))
        f.write(pack("<I", 1298))
        f.write(pack("<I", 0))
        f.write(pack("B", 2))
        f.write(pack("B", 128))
        f.write(pack("B", 1))
        f.write(pack("B", 109))
        f.write(pack("<I", len(obdata.vertices)*3))
        f.write(pack("<I", 0))
        f.write(pack("B", 3))
        f.write(pack("B", 1))
        f.write(pack("B", 0))
        f.write(pack("B", 1))
        f.write(pack("B", 3))
        f.write(pack("B", 128))
        f.write(pack("B", len(obdata.vertices)))
        f.write(pack("B", 108))
        color_layer = obdata.vertex_colors.active.data
        for v in obdata.vertices:
            f.write(pack("<f", v.co.x))
            f.write(pack("<f", v.co.y))
            f.write(pack("<f", v.co.z))
            f.write(pack("<f", 1))
        f.write(pack("B", 1))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 5))
        f.write(pack("B", 4))
        f.write(pack("B", 128))
        f.write(pack("B", len(obdata.vertices)))
        f.write(pack("B", 101))
        for v in obdata.vertices:
            f.write(pack("<h", 0))
            f.write(pack("<h", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 5))
        f.write(pack("B", 5))
        f.write(pack("B", 192))
        f.write(pack("B", len(obdata.vertices)))
        f.write(pack("B", 110))
        for v in obdata.vertices:
            f.write(pack("B", int(127*color_layer[v.index].color[0])))
            f.write(pack("B", int(127*color_layer[v.index].color[1])))
            f.write(pack("B", int(127*color_layer[v.index].color[2])))
            f.write(pack("B", int(127*color_layer[v.index].color[3])))
        f.write(pack("B", 1))
        f.write(pack("B", 1))
        f.write(pack("B", 0))
        f.write(pack("B", 1))
        f.write(pack("B", 0))
        f.write(pack("B", 3))
        f.write(pack("B", 0))
        f.write(pack("B", 20))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))

        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<f", 1))
        f.write(pack("<f", 1))
        f.write(pack("<f", 1))
        f.write(pack("<f", 1))
        f.write(pack("<f", 1))
        f.write(pack("<f", 1))
        f.write(pack("<f", 1))
        f.write(pack("<f", 1))

    f.write(b"INST")
    f.write(pack("<I", len(bpy.data.objects)*80+16))
    f.write(pack("<I", len(bpy.data.objects)))
    f.write(pack("<I", 0))
    objIndex=0
    for i, obj in enumerate(bpy.data.objects):
        f.write(pack("<f", obj.scale[0]))
        f.write(pack("<f", 0))
        f.write(pack("<f", 0))
        f.write(pack("<f", 0))
        f.write(pack("<f", 0))
        f.write(pack("<f", obj.scale[1]))
        f.write(pack("<f", 0))
        f.write(pack("<f", 0))
        f.write(pack("<f", 0))
        f.write(pack("<f", 0))
        f.write(pack("<f", obj.scale[2]))
        f.write(pack("<f", 0))
        f.write(pack("<f", obj.location[0]))
        f.write(pack("<f", obj.location[1]))
        f.write(pack("<f", obj.location[2]))
        f.write(pack("<f", 1))
        f.write(pack("<I", objIndex))
        f.write(pack("<I", 37))
        f.write(pack("<f", 0))
        f.write(pack("<f", 0))
        objIndex+=1
    f.write(b"SST0")
    f.write(pack("<I", 16))
    f.write(pack("<I", 0))
    f.write(pack("<I", 0))
    f.write(b"BNDS")
    f.write(pack("<I", 16))
    f.write(pack("<I", 0))
    f.write(pack("<I", 0))

def Objects_combineallOne(f):
    f.write(b"NU20")
    f.write(pack("<i", -abs(16+15+1*len(bpy.data.materials)*464+16+1+14+1*len(bpy.data.objects)*416+2+16+1*len(bpy.data.objects)*80+16+16)))
    f.write(pack("<I", 6))
    f.write(pack("<I", 0))
    f.write(b"NTBL")
    f.write(pack("<I", 16))
    f.write(pack("<I", 0))
    f.write(pack("<I", 0))
    ##########################
    f.write(b"MS00")
    f.write(pack("<I", len(bpy.data.materials)*464+16))
    f.write(pack("<I", len(bpy.data.materials)))
    f.write(pack("<I", 0))
    MaterialID=1
    TextureID=1
    MaterialNameID = 0
    BSDF = "Principled BSDF"
    for i, mat in enumerate(bpy.data.materials):
        f.write(pack("B", 13))
        f.write(pack("B", 0))
        f.write(pack("B", 1))
        f.write(pack("B", 96))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))

        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 16))
        f.write(pack("B", 8))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 80))
        f.write(pack("B", 7))
        f.write(pack("B", 128))
        f.write(pack("B", 0))
        f.write(pack("B", 0))

        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 16))
        f.write(pack("B", 14))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))

        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 8))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 27))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 68))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 68))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 140))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 1))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 78))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 224))
        f.write(pack("B", 37))
        f.write(pack("B", 5))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 71))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 127))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 127))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 127))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 1))
        f.write(pack("B", 1))
        f.write(pack("B", 0))
        f.write(pack("B", 1))
        f.write(pack("B", 19))
        f.write(pack("B", 0))
        f.write(pack("B", 3))
        f.write(pack("B", 108))
        f.write(pack("<f", 1))
        f.write(pack("<f", 1))
        f.write(pack("<f", 1))
        f.write(pack("<f", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 48))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))

        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("<I", 25))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 16384))
        f.write(pack("<I", 10758192))
        f.write(pack("<I", 4795408))
        f.write(pack("<I", 0))
        f.write(pack("B", 255))
        f.write(pack("B", 255))
        f.write(pack("B", 255))
        f.write(pack("B", 255))
        f.write(pack("B", 255))
        f.write(pack("B", 255))
        f.write(pack("B", 255))
        f.write(pack("B", 255))
        f.write(pack("B", 255))
        f.write(pack("B", 255))
        f.write(pack("B", 255))
        f.write(pack("B", 255))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0x3D))
        f.write(pack("<I", 0))
        f.write(pack("<I", 10758360))#
        f.write(pack("<I", 8904624))#
        f.write(pack("<I", 10010848))#
        f.write(pack("<I", 0))#
        f.write(pack("<f", mat.specular_intensity))
        f.write(pack("<I", 19))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<f", mat.node_tree.nodes[BSDF].inputs[0].default_value[0]))
        f.write(pack("<f", mat.node_tree.nodes[BSDF].inputs[0].default_value[1]))
        f.write(pack("<f", mat.node_tree.nodes[BSDF].inputs[0].default_value[2]))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<f", mat.roughness))
        f.write(pack("<I", 0))
        f.write(pack("<I", MaterialID))
        f.write(pack("<I", 65446))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0xFF000000))
        f.write(pack("<I", 0))
        MaterialID+=1
        MaterialNameID+=1
    f.write(b"OBJ0")
    f.write(pack("<I", 416*len(bpy.data.objects)+16))
    f.write(pack("<I", len(bpy.data.objects)))
    f.write(pack("<I", 0))
    obd = bpy.context.object.data
    VertexDataCount = len(obd.vertices)
    if VertexDataCount == 4:
        for i, obdata in enumerate(bpy.data.meshes):
            f.write(pack("<I", 4))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 1))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 96))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
                            
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
                            
            f.write(pack("<I", 224))

            f.write(pack("<H", 10))
            f.write(pack("<H", 24581))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<H", 86))
            f.write(pack("<H", 27649))
            f.write(pack("<I", 32768))
            f.write(pack("B", 0))
            f.write(pack("<H", 704))
            f.write(pack("B", 30))
            f.write(pack("B", 18))
            f.write(pack("B", 5))
            f.write(pack("B", 0))
            f.write(pack("B", 0))
            f.write(pack("<I", 0))
            f.write(pack("B", 0xD2))
            f.write(pack("B", 128))
            f.write(pack("B", 1))
            f.write(pack("B", 108))
            f.write(pack("B", 4))
            f.write(pack("<I", 128))
            f.write(pack("B", 64))
            f.write(pack("B", 2))
            f.write(pack("B", 48))
            f.write(pack("<I", 1298))
            f.write(pack("<I", 0))
            f.write(pack("B", 2))
            f.write(pack("B", 128))
            f.write(pack("B", 1))
            f.write(pack("B", 109))
            f.write(pack("<I", 4*3))
            f.write(pack("<I", 0))
            f.write(pack("B", 3))
            f.write(pack("B", 1))
            f.write(pack("B", 0))
            f.write(pack("B", 1))
            f.write(pack("B", 3))
            f.write(pack("B", 128))
            f.write(pack("B", 4))
            f.write(pack("B", 108))
            for v in obdata.vertices:
                f.write(pack("<f", v.co.x))
                f.write(pack("<f", v.co.y))
                f.write(pack("<f", v.co.z))
                f.write(pack("<f", 1))
            f.write(pack("B", 1))
            f.write(pack("B", 1))
            f.write(pack("B", 0))
            f.write(pack("B", 1))
            f.write(pack("B", 0))
            f.write(pack("B", 3))
            f.write(pack("B", 0))
            f.write(pack("B", 20))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))

            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<I", 0))
            f.write(pack("<f", 1))
            f.write(pack("<f", 1))
            f.write(pack("<f", 1))
            f.write(pack("<f", 1))
            f.write(pack("<f", 1))
            f.write(pack("<f", 1))
            f.write(pack("<f", 1))
            f.write(pack("<f", 1))
    else:
        raise Exception("must contain 4 vertices and 4 rgba without uv data")

    f.write(b"INST")
    f.write(pack("<I", len(bpy.data.objects)*80+16))
    f.write(pack("<I", len(bpy.data.objects)))
    f.write(pack("<I", 0))
    objIndex=0
    for i, obj in enumerate(bpy.data.objects):
        f.write(pack("<f", obj.scale[0]))
        f.write(pack("<f", 0))
        f.write(pack("<f", obj.rotation_euler[0]))
        f.write(pack("<f", 0))
        f.write(pack("<f", 0))
        f.write(pack("<f", obj.scale[1]))
        f.write(pack("<f", 0))
        f.write(pack("<f", 0))
        f.write(pack("<f", obj.rotation_euler[1]))
        f.write(pack("<f", 0))
        f.write(pack("<f", obj.scale[2]))
        f.write(pack("<f", 0))
        f.write(pack("<f", obj.location[0]))
        f.write(pack("<f", obj.location[1]))
        f.write(pack("<f", obj.location[2]))
        f.write(pack("<f", 1))
        f.write(pack("<I", objIndex))
        f.write(pack("<I", 37))
        f.write(pack("<f", 0))
        f.write(pack("<f", 0))
        objIndex+=1
    f.write(b"SST0")
    f.write(pack("<I", 16))
    f.write(pack("<I", 0))
    f.write(pack("<I", 0))
    f.write(b"BNDS")
    f.write(pack("<I", 16))
    f.write(pack("<I", 0))
    f.write(pack("<I", 0))

def AnimationObjects():
    f.write(b"ALIB")
    f.write(pack("<I", 16))
    f.write(pack("<I", len(bpy.data.objects)))
    f.write(pack("<I", 0))


    f.write(pack("<f", bpy.context.scene.frame_end))
    f.write(pack("<I", 0))
    for i, keyobj in enumerate(bpy.data.objects):
        keyfloat = keyframe.co[0]
        f.write(pack("<f", keyframe.co[0]))
        f.write(pack("<f", 0)) # not sure
        f.write(pack("<f", keyobj.scale[1]))
        f.write(pack("<f", 0)) # not sure
    


        
        

    
def NUWrite(filepath, verts_uvs_rgba_hashes=1, verts_rgba_hashes=2, verts_null=3):
    with open(filepath, "wb") as f:
        if verts_uvs_rgba_hashes == 1:
            Objects_combineallThree(f)
        if verts_uvs_rgba_hashes == 2:
            encodeTextureSet_A(f)
        if verts_rgba_hashes == 2:
            Objects_combineallTwo(f)
        if verts_null == 3:
            Objects_combineallOne(f)
        
        
            
